library(tidyverse)
install.packages(tidyverse)
install.packages("tidyverse")
library(tidyverse)
install.packages(c("nycflights13", "gapminder", "Lahman"))
mpg
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy))
ggplot(data=mpg)
?mpg
ggplot(data = mpg) + geom_point(mapping = aes(x = hwy, y = cyl))
ggplot(data = mpg) + geom_point(mapping = aes(x = class, y = drv))
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, color = class))
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, alpha = class))
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, shape = class))
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy), color = blue)
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy), color = "blue")
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy), color = "pink")
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy), color = "green")
mpg
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, shape = cty))
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, color = year, size = displ))
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, color = year, size = cty))
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, color = year, size = year))
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, color = year, size = cty))
ggplot(data = mpg) +
geom_point(aes(x = displ, y = hwy, color = trans), shape = 21, stroke = 1)
ggplot(data = mpg) +
geom_point(aes(x = displ, y = hwy, color = trans), shape = 21, stroke = 2)
ggplot(data = mpg) +
geom_point(aes(x = displ, y = hwy, color = displ < 5))
ggplot(data = mpg) +
geom_point(aes(x = displ, y = hwy, color = cty < 20))
mpg
library(tidyverse)
mpg
ggplot(data = mpg)+
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ class, nrow = 2)
ggplot(data = mpg)+
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(drv ~ cyl)
ggplot(data = mpg)+
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(. ~ cyl)
ggplot(data = mpg)+
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(. ~ cty)
ggplot(data = mpg)+
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(. ~ displ)
ggplot(data = mpg)+
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(drv ~ . )
?facet_wrap
ggplot(data = mpg)+
geom_smooth(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg)+
geom_smooth(mapping = aes(x = displ, y = hwy, linetype = drv))
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = class)) +
geom_smooth()
?geom_smooth()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = class)) +
geom_smooth(data = filter(mpg, class == "subcompact"), se = FALSE)
diamonds
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut))
?geom_bar
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, y = ..prop.., group=1))
ggplot(data = diamonds) +
stat_summary()
ggplot(data = diamonds) +
stat_summary(
mapping = aes(x = cut, y = depth),
fun.ymin = min,
fun.ymax = max,
fun.y = median)
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_jitter()
?geom_jitter()
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_count()
?geom_boxplot
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_boxplot()
ggplot(data = mpg, mapping = aes(x = cty, y = hwy, group = drv)) +
geom_boxplot()
ggplot(data = mpg, mapping = aes(x = class, y = hwy, color = drv)) +
geom_boxplot()
ggplot(data = mpg, mapping = aes(x = class, y = hwy, group = drv)) +
geom_boxplot()
ggplot(data = mpg, mapping = aes(x = class, y = hwy)) +
geom_boxplot()
library(tidyverse)
diamond
diamonds
filter(diamond, carat > 3)
library(nycflights13)
library(nycflights13)
library(tidyverse)
library(nycflights13)
library(tidyverse)
library(nycflights13)
library(ggplots2)
library(ggplot2)
library(nycflights13)
install.packages("nycflights13")
library(nycflights13)
flights
View(flights)
library(nycflights13)
library(tidyverse)
flights
filter(flights, month == 1, day == 1)
jan1 <- filter(flights, month == 1, day == 1)
(dec25 <- filter(flights, month == 12, day == 25))
near(1/49*49 == 1)
near(1/49*49, 1)
library(nycflights13)
library(tidyverse)
glimpse?
?glimpse
glimpse(flights)
filter(flights, arr_delay > 120)
filter(flights, dest == "IAH" | dest == "HOU")
filter(flights, dest %in% c("IAH","HOU"))
carrier
flights.carrier
airlines
filter(flights, carrier %in% c("AA","DL", "UA"))
filter(flights, between(month, 7, 9))
filter(flights, dep_delay <= 0, arr_delay > 120)
filter(flights, dep_delay <= 0, arr_delay > 120, is.na(dep_delay))
filter(flights, dep_delay <= 0, arr_delay > 120, !is.na(dep_delay))
filter(flights, dep_delay >= 60, dep_delay - arr_delay > 30, !is.na(dep_delay))
filter(flights, dep_time <= 600 | dep_time == 2400)
filter(flights, between(dep_time, 0, 600))
filter(flights, is.na(dep_time))
filter(flights, is.na(arr_time))
arrange(flights, is.na(dep_time))
arrange(flights, is.na(dep_time), dep_time)
arrange(flights, !is.na(dep_time), dep_time)
arrange(flights, desc(dep_delay))
arrange(flights, dep_delay)
arrange(flights, air_time)
fastest <- arrange(flights, air_time)
fastest
View(fastest)
arrange(flights, distance)
select(flights, year, month day)
select(flights, year, month, day)
select(flights, year:day)
select(flights, -(year:day)
)
rename(flights, tail_num = tailnum)
select(flights, time_hour, air_time, everything())
?one_of
flights_sml <- select(flights, )
flights_sml <- select(flights, year:day
ends_with("delay"),
flights_sml <- select(flights, year:day, ends_with("delay", distance, air_time)
)
flights_sml <- select(flights, year:day, ends_with("delay"), distance, air_time)
mutate(flights_sml, gain = arr_delay - dep_delay, speed = distance/air_time * 60)
mutate(flights, air_time, arr_time- dep_time)
select(flights, air_time, arr_time- dep_time)
mutate(flights, air_time2 =  arr_time- dep_time)
select(flights, air_time, ait_time2)
select(flights, air_time, air_time2)
select(flights, air_time : air_time2)
mutate(flights,
air_time2 = arr_time - dep_time,
air_time_diff = air_time2 - air_time) %>%
filter(air_time_diff != 0) %>%
select(air_time, air_time2, dep_time, arr_time, dest)
time2min <- function(x){}
time2min <- function(x){
x %/% 100 * 60 + x %% 100
}
mutate(flights,
dep_delay2 = time2min(dep_time) - time2min(sched_dep_time)) %>%
filter(dep_delay2 != dep_delay) %>%
select(dep_time, sched_dep_time, dep_delay, dep_delay2)
?min_rank
mutate(flights,
dep_delay_rank = min_rank(dep_delay)) %>%
arrange(dep_delay_rank) %>%
filter(dep_delay_rank <= 10)
dep_delay_rank = min_rank(-dep_delay)) %>%
mutate(flights,
dep_delay_rank = min_rank(-dep_delay)) %>%
arrange(dep_delay_rank) %>%
filter(dep_delay_rank <= 10)
summarise(flights, delay = mean(dep_delay, na.rm = TRUE))
by_day <- group_by(flights, year, month, day)
summarise(by_day, delay = mean(dep_delay, na.rm = TRUE))
#
delays <- flights %>%
group_by(dest) %>%
summarise(
count = n(),
dist = mean(distance, na.rm = TRUE),
delay = mean(arr_delay, na.rm = TRUE)
)
filter(delay, count > 20, dest  != "HNL")
filter(delays, count > 20, dest  != "HNL")
not_cancelled <- flights %>%
filter(!is.na(dep_delay), !is.na(arr_delay))
not_cancelled %>%
group_by(year, month, day) %>%
summarise(mean = mean(dep_delay))
delays <- not_cancelled %>%
group_by(tailnum) %>%
summarise(
delay = mean(arr_delay)
)
ggplot(data=delay, mapping = aes(x=delay)) + geom_freqpoly(binwidth = 10)
ggplot(data=delays, mapping = aes(x=delay)) + geom_freqpoly(binwidth = 10)
delays <- not_cancelled %>%
group_by(tailnum) %>%
summarise(
delay = mean(arr_delay, na.rm = TRUE),
n = n()
)
ggplot(data=delays, mapping = aes(x=n, y=delay)) + geom_point(alpha = 1/10)
delays %>%
filter(n > 25) %>%
ggplot(mapping = aes(x = n, y = delay)) +
geom_point(alpha = 1/10)
install.packages("rmarkdown")
library(rmarkdown)
plot(cars)
plot(cars)
# Chunk 1
plot(cars)
# Chunk 1
plot(cars)
plot(cars)
library(nycflights13)
library(tidyverse)
plot(cars)
library(nycflights13)
library(tidyverse)
Prediction <- predict(fit, test, type = "class")
source('C:/Users/dsilv/Desktop/Learning/Data Science/Data-Science/Kaggle/Titanic/RScript_Titanic.R', echo=TRUE)
setwd("C:/Users/dsilv/Desktop/Learning/Data Science/Data-Science/Kaggle/Titanic")
train <- read.csv("C:/Users/dsilv/Desktop/Learning/Data Science/Data-Science/Kaggle/Titanic/train.csv")
test <- read.csv("C:/Users/dsilv/Desktop/Learning/Data Science/Data-Science/Kaggle/Titanic/test.csv")
submit <- data.frame(PassengerId = test$PassengerId, Survived = test$Survived)
summary(train$Sex)
prop.table(table(train$Sex, train$Survived),1)
test$Survived <- 0
test$Survived[test$Sex == 'female'] <- 1
submit <- data.frame(PassengerId = test$PassengerId, Survived = test$Survived)
fit <- rpart(Survived ~ Pclass + Sex + Age +  SibSp + Parch + Fare + Embarked, data=train, method="class")
#Import rpart i.e. Recursive Partitioning and Regression Trees
#Using Decision Trees
library(rpart)
fit <- rpart(Survived ~ Pclass + Sex + Age +  SibSp + Parch + Fare + Embarked, data=train, method="class")
library(rpart.plot)
library(RColorBrewer)
library(rattle)
fancyRpartPlot(fit)
Prediction <- predict(fit, test, type = "class")
submit <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)
write.csv(submit, file = "myfirstdtree.csv", row.names = FALSE)
#Manually trim a decision tree
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data=train,
method="class", control=rpart.control(minsplit=2, cp=0.005))
#Manually trim a decision tree
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data=train,
method="class", control=rpart.control(minsplit=2, cp=0))
fancyRpartPlot(fit)
Prediction1 <- predict(fit, test, type = "class")
submit <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)
write.csv(submit, file = "mysnippedtree.csv", row.names = FALSE)
#Manually trim a decision tree
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data=train,
method="class", control=rpart.control(minsplit=2, cp=0.5))
fancyRpartPlot(fit)
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data=train,
method="class", control=rpart.control(minsplit=2, cp=0.5))
fancyRpartPlot(fit)
#Manually trim a decision tree
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data=train,
method="class", control=rpart.control(minsplit=2, cp=0.05))
fancyRpartPlot(fit)
#Manually trim a decision tree
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data=train,
method="class", control=rpart.control(minsplit=2, cp=0.005))
fancyRpartPlot(fit)
Prediction1 <- predict(fit, test, type = "class")
submit <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)
write.csv(submit, file = "mysnippedtree.csv", row.names = FALSE)
#Feature Engineering
test$Survived <- NA
combi <- rbind(train,test)
train$Name[1]
combi$Name <- as.character(combi$Name)
combi$Name[1]
strsplit(combi$Name[1], split='[,.]')
strsplit(combi$Name[1], split='[,.]')[[1]]
strsplit(combi$Name[1], split='[,.]')[[1]][2]
combi$Title <- sapply(combi$Name, FUN=function(x){strsplit(x, split='[,.]')[[1]][2])})
combi$Title <- sapply(combi$Name, FUN=function(x){strsplit(x, split='[,.]')[[1]][2]})
combi$Title <- sub(' ', '', combi$Title)
table(combi$Title)
combi$Title[combi$T %in% c('Mme', 'Mlle')] <- 'Mlle'
combi$Title[combi$T %in% c('Mme', 'Mlle')] <- 'Mlle'
combi$Title[combi$T %in% c('Capt', 'Don', 'Major', 'Sir', 'Jonkheer')] <- 'Sir'
combi$Title[combi$T %in% c('Dona', 'Lady', 'the Countess')] <- 'Lady'
combi$Title <- factor(combi$Title)
combi$FamilySize <- combi$SibSp + combi$Parch + 1
combi$Surname <- sapply(combi$Name, FUN=function(x){strsplit(x, split='[,.]')[[1]][1]})
combi$FamilyId <- paste(as.character(combi$FamilySize), combi$Surname, sep = "")
combi$FamilyId[combi$FamilySize <2] <- 'Small'
table(combi$FamilyId)
famIDs <- data.frame(table(combi$FamilyId))
View(famIDs)
famIDs <- famIDs[famIDs$Freq <= 2, ]
combi$FamilyID[combi$FamilyID %in% famIDs$Var1] <- 'Small'
combi$FamilyId[combi$FamilyId %in% famIDs$Var1] <- 'Small'
combi$FamilyId <- factor(combi$FamilyId)
train <- combi[1:891, ]
test <- combi[892:1309,
]
#Split data back to train & test data
train <- combi[1:891,]
test <- combi[892:1309,]
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare +
Embarked + Title + FamilySize + FamilyId,
data=train, method="class")
fancyRpartPlot(fit)
Prediction2 <- predict(fit, test, type = "class")
submit <- data.frame(PassengerId = test$PassengerId, Survived = Prediction2)
write.csv(submit, file = "featureenggtree.csv", row.names = FALSE)
summary(combi$Age)
Agefit <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Title + FamilySize,
data=combi[!is.na(combi$Age),],
method="anova")
combi$Age[is.na(combi$Age)] <- predict(Agefit, combi[is.na(combi$Age),])
summary(combi)
which(combi$Embarked == '')
combi$Embarked[c(62, 830)] = 'S'
combi$Embarked <- factor(combi$Embarked)
summary(combi$Fare)
which(is.na(combi$Fare))
combi$Fare[1044] <- median(combi$Fare, na.rm = TRUE)
combi$FamilyID2 <- combi$FamilyID
combi$FamilyID2 <- as.character(combi$FamilyID2)
combi$FamilyID2[combi$FamilySize <= 3] <- 'Small'
combi$FamilyID2 <- factor(combi$FamilyID2)
combi$FamilyID2 <- combi$FamilyId
combi$FamilyID2 <- as.character(combi$FamilyID2)
combi$FamilyID2[combi$FamilySize <= 3] <- 'Small'
combi$FamilyID2 <- factor(combi$FamilyID2)
library(randomForest)
set.seed(415)
fit <- randomForest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare +
Embarked + Title + FamilySize + FamilyID2,
data=train,
importance=TRUE,
ntree=2000)
combi$FamilyID2 <- combi$FamilyId
combi$FamilyID2 <- as.character(combi$FamilyID2)
combi$FamilyID2[combi$FamilySize <= 3] <- 'Small'
combi$FamilyID2 <- factor(combi$FamilyID2)
set.seed(415)
fit <- randomForest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare +
Embarked + Title + FamilySize + FamilyID2,
data=train,
importance=TRUE,
ntree=2000)
#Split data back to train & test data
train <- combi[1:891,]
test <- combi[892:1309,]
set.seed(415)
fit <- randomForest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare +
Embarked + Title + FamilySize + FamilyID2,
data=train,
importance=TRUE,
ntree=2000)
varImpPlot(fit)
Prediction <- predict(fit, test)
submit <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)
write.csv(submit, file = "firstforest.csv", row.names = FALSE)
#Split data back to train & test data
train <- combi[1:891,]
test <- combi[892:1309,]
set.seed(400)
fit <- randomForest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare +
Embarked + Title + FamilySize + FamilyID2,
data=train,
importance=TRUE,
ntree=2500)
varImpPlot(fit)
Prediction5 <- predict(fit, test)
submit <- data.frame(PassengerId = test$PassengerId, Survived = Prediction5)
write.csv(submit, file = "firstforest.csv", row.names = FALSE)
