coord_flip() +
guides(fill = FALSE) +
ggtitle("Causes of Mortality in India (2016)") +
scale_y_continuous(breaks = c(0,5,10,15,20,25,30), labels = c("0%", "5%", "10%", "15%", "20%", "25%", "30%")) +
labs(y = NULL, x = NULL) +
theme_minimal()
setwd("C:/Users/dsilv/Desktop/Learning/Data Science/Data-Science/Machine Learning A-Z/Part 1 - Data Preprocessing")
setwd("C:/Users/dsilv/Desktop/Learning/Data Science/Data-Science/Machine Learning A-Z/Part 1 - Data Preprocessing/Section 2 -------------------- Part 1 - Data Preprocessing --------------------")
# Importing the dataset
dataset = read.csv('Data.csv')
View(dataset)
library(tidyverse)
library(rvest)
base_url <- "https://www.billboard.com/charts/greatest-of-all-time-pop-songs-artists"
billboard <- data.frame()
webpage <- read_html(base_url)
View(webpage)
artist <- html_nodes(webpage, ".chart-row__artist")
View(artist)
artist <- html_text(artist)
artist <- as.numeric(html_text(artist))
artist <- as.character(html_text(artist))
artist <- html_text(artist)
artist <- html_nodes(webpage, ".chart-row__artist")
artist <- as.numeric(html_text(artist))
artist <- html_nodes(webpage, ".chart-row__artist")
artist <- as.character(html_text(artist))
rank <- html_nodes(webpage, ".chart-row__rank")
rank <- as.numeric(html_text(rank))
data.frame('Artist' = artist,
'Rank' = rank)
top_artists <- data.frame('Artist' = artist,
'Rank' = rank)
View(top_artists)
top_artists <- data.frame('Artist' = artist,
'Rank' = rank) %>%
filter(rank <= 10)
genius_url <- "https://genius.com/artists/Bruno-mars"
song_list <- data.frame()
genius_page <- read_html(genius_url)
songs <- html_nodes(genius_page, ".mini_card_grid_song href")
songs <- html_nodes(genius_page, ".mini_card_grid_song") %>%
html_nodes("href")
genius_url <- "https://genius.com/artists/Bruno-mars"
song_list <- data.frame()
genius_page <- read_html(genius_url)
songs <- html_nodes(genius_page, ".mini_card_grid_song") %>%
html_nodes("href")
genius_url <- "https://genius.com/artists/Bruno-mars"
song_list <- data.frame()
genius_page <- read_html(genius_url)
songs <- html_nodes(genius_page, "mini_song_card") %>%
html_nodes("href")
genius_url <- "https://genius.com/artists/Bruno-mars"
song_list <- data.frame()
genius_page <- read_html(genius_url)
songs <- html_nodes(genius_page, "mini_song_card") %>%
html_attr("href")
View(song_list)
genius_url <- "https://genius.com/artists/Bruno-mars"
genius_page <- read_html(genius_url)
songs <- html_nodes(genius_page, "mini_song_card") %>%
html_attr("href")
genius_url <- "https://genius.com/artists/Bruno-mars"
genius_page <- read_html(genius_url)
songs <- html_nodes(genius_page, "mini_card_grid-song") %>%
html_attr("href")
genius_url <- "https://genius.com/artists/Bruno-mars"
genius_page <- read_html(genius_url)
songs <- html_nodes(genius_page, ".mini_card_grid-song") %>%
html_attr("href")
genius_url <- "https://genius.com/artists/Bruno-mars"
genius_page <- read_html(genius_url)
songs <- html_nodes(genius_page, ".mini_card_grid-song a") %>%
html_attr("href")
genius_url <- "https://genius.com/artists/Bruno-mars"
genius_page <- read_html(genius_url)
songs <- html_nodes(genius_page, ".mini_card_grid-song a") %>%
html_attr("href") %>%
as.character(html_text())
genius_url <- "https://genius.com/artists/Bruno-mars"
genius_page <- read_html(genius_url)
songs <- html_nodes(genius_page, ".mini_card_grid-song a") %>%
html_attr("href") %>%
as.character()
genius_url <- "https://genius.com/artists/Bruno-mars"
genius_page <- read_html(genius_url)
songs <- html_nodes(genius_page, ".mini_card_grid-song a") %>%
html_attr("href") %>%
as.character()
songs <-   as.character(html_text(songs))
songs <- html_nodes(genius_page, ".mini_card_grid-song a") %>%
html_attr("href") %>%
data.frame()
View(songs)
lyrics <- tibble()
for(i in 1:length(song_links[1:4])){ # only grab 3 songs in the .rmd document
# always nice to know where a long program is
message(str_c('scraping song ', i, ' of ', length(song_links) ))
# scape the text of a song
lyrics_scraped <- song_links[i] %>%
read_html() %>%
html_nodes("p") %>%
html_text()
# format the song name for the data frame
song_name <- song_titles[i] %>%
str_to_lower() %>%
gsub("[^[:alnum:] ]", "", .) %>%
gsub("[[:space:]]", "_", .)
# add song to lyrics data frame
lyrics <- rbind(lyrics, tibble(text=lyrics_scraped, artist = 'bruno-mars', song=song_name) )
# pause so we don't get banned!
#Sys.sleep(10)
}
genius_url <- "https://genius.com/artists/Bruno-mars"
genius_page <- read_html(genius_url)
song_links <- html_nodes(genius_page, ".mini_card_grid-song a") %>%
html_attr("href") %>%
data.frame()
View(song_links)
lyrics <- tibble()
for(i in 1:length(song_links[1:4])){ # only grab 3 songs in the .rmd document
# always nice to know where a long program is
message(str_c('scraping song ', i, ' of ', length(song_links) ))
# scape the text of a song
lyrics_scraped <- song_links[i] %>%
read_html() %>%
html_nodes("p") %>%
html_text()
# format the song name for the data frame
song_name <- song_titles[i] %>%
str_to_lower() %>%
gsub("[^[:alnum:] ]", "", .) %>%
gsub("[[:space:]]", "_", .)
# add song to lyrics data frame
lyrics <- rbind(lyrics, tibble(text=lyrics_scraped, artist = 'bruno-mars', song=song_name) )
}
lyrics <- c()
# Get lyrics via for loop
for (i in 1:3) {
# Get page lyrics
intermediate <- read_html(song_links[i]) %>%
html_nodes("p") %>%
html_text() %>%
.[1]
# Add that onto the empty vector
lyrics <- append(lyrics, intermediate)
}
lyrics <- read_html(song_links[1]) %>%
html_nodes("p")
genius_url <- "https://genius.com/artists/Bruno-mars"
genius_page <- read_html(genius_url)
song_links <- html_nodes(genius_page, ".mini_card_grid-song a") %>%
html_attr("href")
lyrics <- read_html(song_links[1]) %>%
html_nodes("p")
View(lyrics)
lyrics
genius_url <- "https://genius.com/artists/Bruno-mars"
genius_page <- read_html(genius_url)
song_links <- html_nodes(genius_page, ".mini_card_grid-song a") %>%
html_attr("href")
for (i in 1:3) {
# Get page lyrics
intermediate <- read_html(song_links[i]) %>%
html_nodes("p") %>%
html_text() %>%
.[1]
# Add that onto the empty vector
lyrics <- append(lyrics, intermediate)
}
lyrics[1]
View(lyrics)
lyrics <- c()
# Get lyrics via for loop
for (i in 1:3) {
# Get page lyrics
intermediate <- read_html(song_links[i]) %>%
html_nodes("p") %>%
html_text()
# Add that onto the empty vector
lyrics <- append(lyrics, intermediate)
}
lyrics[1]
lyrics[2]
lyrics[3]
for (i in 1:3) {
# Get page lyrics
intermediate <- read_html(song_links[i]) %>%
html_nodes(".lyrics p") %>%
html_text()
# Add that onto the empty vector
lyrics <- append(lyrics, intermediate)
}
lyrics[1]
lyrics[2]
lyrics <- c()
# Get lyrics via for loop
for (i in 1:3) {
# Get page lyrics
intermediate <- read_html(song_links[i]) %>%
html_nodes(".lyrics section p") %>%
html_text()
# Add that onto the empty vector
lyrics <- append(lyrics, intermediate)
}
lyrics[1]
for (i in 1:3) {
# Get page lyrics
intermediate <- read_html(song_links[i]) %>%
html_nodes(".lyrics div.lyrics p") %>%
html_text()
# Add that onto the empty vector
lyrics <- append(lyrics, intermediate)
}
lyrics[1]
for (i in 1:3) {
# Get page lyrics
intermediate <- read_html(song_links[i]) %>%
html_nodes("div.lyrics p") %>%
html_text()
# Add that onto the empty vector
lyrics <- append(lyrics, intermediate)
}
lyrics[2]
lyrics[3]
genius_urls <- paste0("https://genius.com/artists/",top_artists$Artist)
artist <- html_nodes(webpage, ".chart-row__artist")
artist <- as.character(html_text(artist)) %>%
gsub("\n", "")
artist <- html_nodes(webpage, ".chart-row__artist")
artist <- as.character(html_text(artist))
top_artists <- data.frame('Artist' = artist,
'Rank' = rank) %>%
filter(rank <= 10) %>%
top_artists$Artist <- gsub("\n", "")
top_artists <- data.frame('Artist' = artist,
'Rank' = rank) %>%
filter(rank <= 10) %>%
top_artists$Artist <- gsub("\n", "", top_artists$Artist)
top_artists <- data.frame('Artist' = artist,
'Rank' = rank) %>%
filter(rank <= 10)
top_artists$Artist <- gsub("\n", "", top_artists$Artist)
genius_urls <- paste0("https://genius.com/artists/",top_artists$Artist)
artist_lyrics <- data.frame()
setwd("C:/Users/dsilv/Desktop/Learning/Data Science/Data-Science/Projects/Webscraping")
library(tidyverse)
library(rvest)
base_url <- "https://www.billboard.com/charts/greatest-of-all-time-pop-songs-artists"
webpage <- read_html(base_url)
artist <- html_nodes(webpage, ".chart-row__artist")
artist <- as.character(html_text(artist))
rank <- html_nodes(webpage, ".chart-row__rank")
rank <- as.numeric(html_text(rank))
top_artists <- data.frame('Artist' = artist,
'Rank' = rank) %>%
filter(rank <= 10)
top_artists$Artist <- gsub("\n", "", top_artists$Artist)
View(webpage)
genius_urls <- paste0("https://genius.com/artists/",top_artists$Artist)
for (i in 1:10) {
genius_page <- read_html(genius_urls[i])
song_links <- html_nodes(genius_page, ".mini_card_grid-song a") %>%
html_attr("href")
genius_artist <- top_artists$Artist[i]
#Extracting Lyrics
lyrics <- c()
# Get lyrics via for loop
for (i in 1:3) {
# Get page lyrics
intermediate <- read_html(song_links[i]) %>%
html_nodes("div.lyrics p") %>%
html_text()
# Add that onto the empty vector
lyrics <- append(lyrics, intermediate)
artist_lyrics <- data.frame('Artist' = genius_artist,
'Lyrics' = lyrics[i])
}
}
View(artist_lyrics)
top_artists$Artist
top_artists$Artist[1]
for (i in 1:10) {
genius_page <- read_html(genius_urls[i])
song_links <- html_nodes(genius_page, ".mini_card_grid-song a") %>%
html_attr("href")
genius_artist <- top_artists$Artist[i]
#Extracting Lyrics
lyrics <- c()
# Get lyrics via for loop
for (i in 1:3) {
# Get page lyrics
intermediate <- read_html(song_links[i]) %>%
html_nodes("div.lyrics p") %>%
html_text()
# Add that onto the empty vector
lyrics <- append(lyrics, intermediate)
}
artist_lyrics <- data.frame('Artist' = genius_artist,
'Lyrics' = lyrics[i])
}
genius_urls <- paste0("https://genius.com/artists/",top_artists$Artist)
for (i in 1:10) {
genius_page <- read_html(genius_urls[i])
song_links <- html_nodes(genius_page, ".mini_card_grid-song a") %>%
html_attr("href")
artist_lyrics <- data.frame('Artist' = top_artists$Artist[i])
#Extracting Lyrics
lyrics <- c()
# Get lyrics via for loop
for (i in 1:3) {
# Get page lyrics
intermediate <- read_html(song_links[i]) %>%
html_nodes("div.lyrics p") %>%
html_text()
# Add that onto the empty vector
lyrics <- append(lyrics, intermediate)
artist_lyrics <- data.frame('Lyrics' = lyrics[i])
}
}
View(artist_lyrics)
for (i in 1:10) {
genius_page <- read_html(genius_urls[i])
song_links <- html_nodes(genius_page, ".mini_card_grid-song a") %>%
html_attr("href")
artist_lyrics <- data.frame('Artist' = top_artists$Artist[i])
#Extracting Lyrics
# lyrics <- c()
# Get lyrics via for loop
#  for (i in 1:3) {
# Get page lyrics
# intermediate <- read_html(song_links[i]) %>%
#  html_nodes("div.lyrics p") %>%
# html_text()
# Add that onto the empty vector
#  lyrics <- append(lyrics, intermediate)
#   artist_lyrics <- data.frame('Lyrics' = lyrics[i])
#  }
}
View(artist_lyrics)
genius_urls <- paste0("https://genius.com/artists/",top_artists$Artist)
# genius_url <- "https://genius.com/artists/Bruno-mars"
for (i in 1:10) {
genius_page <- read_html(genius_urls[i])
song_links <- html_nodes(genius_page, ".mini_card_grid-song a") %>%
html_attr("href")
artist_lyrics <- data.frame('Artist' = top_artists$Artist[i])
#Extracting Lyrics
# lyrics <- c()
# Get lyrics via for loop
#  for (i in 1:3) {
# Get page lyrics
# intermediate <- read_html(song_links[i]) %>%
#  html_nodes("div.lyrics p") %>%
# html_text()
# Add that onto the empty vector
#  lyrics <- append(lyrics, intermediate)
#   artist_lyrics <- data.frame('Lyrics' = lyrics[i])
#  }
}
View(artist_lyrics)
for (i in 1:10) {
genius_page <- read_html(genius_urls[i])
song_links <- html_nodes(genius_page, ".mini_card_grid-song a") %>%
html_attr("href")
artist_lyrics <- data.frame('Artist' = top_artists$Artist)
#Extracting Lyrics
# lyrics <- c()
# Get lyrics via for loop
#  for (i in 1:3) {
# Get page lyrics
# intermediate <- read_html(song_links[i]) %>%
#  html_nodes("div.lyrics p") %>%
# html_text()
# Add that onto the empty vector
#  lyrics <- append(lyrics, intermediate)
#   artist_lyrics <- data.frame('Lyrics' = lyrics[i])
#  }
}
View(artist_lyrics)
for (i in 1:10) {
genius_page <- read_html(genius_urls[i])
song_links <- html_nodes(genius_page, ".mini_card_grid-song a") %>%
html_attr("href")
artist_lyrics <- data.frame('Artist' = top_artists$Artist)
#Extracting Lyrics
lyrics <- c()
# Get lyrics via for loop
for (i in 1:3) {
# Get page lyrics
intermediate <- read_html(song_links[i]) %>%
html_nodes("div.lyrics p") %>%
html_text()
# Add that onto the empty vector
lyrics <- append(lyrics, intermediate)
artist_lyrics <- data.frame('Lyrics' = lyrics)
}
}
View(artist_lyrics)
for (i in 1:10) {
genius_page <- read_html(genius_urls[i])
song_links <- html_nodes(genius_page, ".mini_card_grid-song a") %>%
html_attr("href")
#artist_lyrics <- data.frame('Artist' = top_artists$Artist)
#Extracting Lyrics
lyrics <- c()
# Get lyrics via for loop
for (i in 1:3) {
# Get page lyrics
intermediate <- read_html(song_links[i]) %>%
html_nodes("div.lyrics p") %>%
html_text()
# Add that onto the empty vector
lyrics <- append(lyrics, intermediate)
artist_lyrics <- data.frame('Artist' = top_artists$Artist,
'Lyrics' = lyrics)
}
}
artist_lyrics <- tibble()
View(top_artists)
genius_urls <- paste0("https://genius.com/artists/",top_artists$Artist)
# genius_url <- "https://genius.com/artists/Bruno-mars"
artist_lyrics <- tibble()
for (i in 1:10) {
genius_page <- read_html(genius_urls[i])
song_links <- html_nodes(genius_page, ".mini_card_grid-song a") %>%
html_attr("href")
#artist_lyrics <- data.frame('Artist' = top_artists$Artist)
# Get lyrics via for loop
for (j in 1:3) {
# Get page lyrics
lyrics_scraped <- read_html(song_links[j]) %>%
html_nodes("div.lyrics p") %>%
html_text()
# Add that onto the empty vector
# lyrics <- append(lyrics, intermediate)
artist_lyrics <- rbind(artist_lyrics, tibble(text = lyrics_scraped,
artist = top_artists$Artist[i]))
#artist_lyrics <- data.frame('Artist' = top_artists$Artist,
#'Lyrics' = lyrics)
}
}
View(artist_lyrics)
song_name <- read_html(song_links[j]) %>%
html_nodes("h1.header_with_cover_art-primary_info-title") %>%
html_text()
artist_lyrics <- tibble()
for (i in 1:10) {
genius_page <- read_html(genius_urls[i])
song_links <- html_nodes(genius_page, ".mini_card_grid-song a") %>%
html_attr("href")
#artist_lyrics <- data.frame('Artist' = top_artists$Artist)
# Get lyrics via for loop
for (j in 1:3) {
# Get page lyrics
lyrics_scraped <- read_html(song_links[j]) %>%
html_nodes("div.lyrics p") %>%
html_text()
#get song name
song_name <- read_html(song_links[j]) %>%
html_nodes("h1.header_with_cover_art-primary_info-title") %>%
html_text()
artist_lyrics <- rbind(artist_lyrics, tibble(artist = top_artists$Artist[i],
song = song_name,
text = lyrics_scraped ))
#artist_lyrics <- data.frame('Artist' = top_artists$Artist,
#'Lyrics' = lyrics)
}
}
View(artist_lyrics)
#Inspect the results
artist_lyrics
base_url <- "https://www.billboard.com/charts/greatest-of-all-time-pop-songs-artists"
webpage <- read_html(base_url)
# Get the artist name
artist <- html_nodes(webpage, ".chart-row__artist")
artist <- as.character(html_text(artist))
# Get the artist rank
rank <- html_nodes(webpage, ".chart-row__rank")
rank <- as.numeric(html_text(rank))
base_url <- "https://www.billboard.com/charts/greatest-of-all-time-pop-songs-artists"
webpage <- read_html(base_url)
# Get the artist name
artist <- html_nodes(webpage, ".chart-row__artist")
artist <- as.character(html_text(artist)) %>%
gsub("\n", "", artist)
base_url <- "https://www.billboard.com/charts/greatest-of-all-time-pop-songs-artists"
webpage <- read_html(base_url)
# Get the artist name
artist <- html_nodes(webpage, ".chart-row__artist")
artist <- as.character(html_text(artist))
# Get the artist rank
rank <- html_nodes(webpage, ".chart-row__rank")
rank <- as.numeric(html_text(rank))
# Save it to a dataframe
top_artists <- tibble('Artist' = artist,
'Rank' = rank) %>%
filter(rank <= 10)
#Format the link to navigate to the Artists page
genius_urls <- paste0("https://genius.com/artists/",top_artists$Artist)
artist <- html_nodes(webpage, ".chart-row__artist")
artist <- as.character(html_text(artist))
# Get the artist rank
rank <- html_nodes(webpage, ".chart-row__rank")
rank <- as.numeric(html_text(rank))
# Save it to a dataframe
top_artists <- tibble('Artist' = gsub("\n", "", artist),
'Rank' = rank) %>%
filter(rank <= 10)
#Format the link to navigate to the Artists page
genius_urls <- paste0("https://genius.com/artists/",top_artists$Artist)
